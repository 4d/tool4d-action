# action.yml
name: 'Run tool4d!'
author: 'Eric Marchand'
branding:
  icon: 'terminal'
  color: 'blue'
description: 'Run 4D code using tool4d'
inputs:
  project:
    description: 'Project to run (* to find it automatically)'
    required: false
  startup-method:
    description: 'Startup method name (to replace database method)'
    required: false
  error-flag:
    description: 'path of file to check for errors (default "error")'
    required: false
  product-line:
    description: 'tool4d product line (default 20.x)'
    required: false
  version:
    description: 'tool4d version (default 20.0)'
    required: false
  build-method:
    description: 'tool4d build number (default latest)'
    required: false
outputs:
  tool4d:
    description: 'tool4d binary path.'
    value: ${{ steps.tool4d.outputs.tool4d }}
runs:
  using: 'composite'
  steps:
    - id: tool4d
      shell: bash
      run: |
        # TODO: allow to choose 4D version
        product_line="${{ inputs.product-line }}"
        version="${{ inputs.version }}"
        build="${{ inputs.build }}"

        if [[ -z "$product_line" ]]; then
          product_line="20.x" # CLEAN: get somewhere online latest?
        fi
        if [[ -z "$version" ]]; then
          version="20.0" # CLEAN: could warn if not correct according to product line
        fi
        if [[ -z "$build" ]]; then
          build="latest"
        fi

        echo "⬇️ Download tool4d"
        if [[ $RUNNER_OS == 'macOS' ]]; then
          # check arch? if github provide arm
          curl "https://resources-download.4d.com/release/$product_line/$version/$build/mac/tool4d_v20.0_mac_x86.tar.xz" -o tool4d.tar.xz -sL
          tar xzf tool4d.tar.xz
          tool4d_bin=./tool4d.app/Contents/MacOS/tool4d
        elif [[ $RUNNER_OS == 'Windows' ]]; then
          curl "https://resources-download.4d.com/release/$product_line/$version/$build/win/tool4d_v20.0_win.tar.xz" -o tool4d.tar.xz -sL
          tar xJf tool4d.tar.xz
          tool4d_bin=./tool4d/tool4d.exe
        else
          >&2 echo "Not supported runner OS $RUNNER_OS"
          exit 1
        fi
        echo "tool4d=$tool4d_bin" >> $GITHUB_OUTPUT

        project="${{ inputs.project }}"
        if [[ -z "$project" ]]; then # TODO: instead create a new step with condition if:  github.event.inputs.project != ''
          echo "💡 Define a project to run or use `tool4d` binary" 
          exit 0
        fi

        if [[ "$project" == "*" ]]; then
          echo "🔎 Try to find 4DProject file in workspace"
          project=$(find . -name "*.4DProject" -not -path "./Components/*" | head -n 1)
          echo "$project"
        fi
        if [[ $RUNNER_OS == 'Windows' ]]; then
          project=$(echo "$project" | sed 's/^\.\///g')
          project=$(echo "$project" | sed 's/\//\\/g')
          project="${{ github.workspace }}\\$project"
          echo "$project"
        fi

        echo "🚀 Run code"

        options="--dataless"

        startup_method="${{ inputs.startup-method }}"
        if [[ -z "$startup_method" ]]; then
          "$tool4d_bin" --project "$project" $options
        else
          "$tool4d_bin" --project "$project" $options --skip-onstartup --startup-method "$startup_method" # TODO: do only one call (but parsing failed of arg...)
        fi
        exit_code=$?

        error_flag="${{ inputs.error-flag }}"
        if [[ -z "$error_flag" ]]; then
          error_flag="error"
        fi
        if [ $exit_code -eq 0 ]; then
          # chec error file flag 
          # TODO: allow user to change flag path or expect 4d could quit with a specific exit code)
          if [[ -f "$error_flag" ]]; then
            exit 1
          fi
        else
          exit $exit_code
        fi
